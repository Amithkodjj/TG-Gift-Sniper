# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from itertools import combinations
import os

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ ---
from services.database import get_owner_data, save_owner_data

async def get_stars_balance(bot) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –ø–æ –≤—Å–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API –±–æ—Ç–∞.
    """
    offset = 0
    limit = 100
    balance = 0

    while True:
        get_transactions = await bot.get_star_transactions(offset=offset, limit=limit)
        transactions = get_transactions.transactions

        if not transactions:
            break

        for transaction in transactions:
            source = transaction.source
            amount = transaction.amount
            if source is not None:
                balance += amount
            else:
                balance -= amount

        offset += limit

    return balance


async def refresh_balance(bot) -> int:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –≤ –¥–∞–Ω–Ω—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    """
    balance = await get_stars_balance(bot)
    owner_data = await get_owner_data()
    owner_data["stars_balance"] = balance
    await save_owner_data(owner_data)
    return balance


async def change_balance(delta: int) -> int:
    """
    –ò–∑–º–µ–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –≤ –¥–∞–Ω–Ω—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ delta, –Ω–µ –¥–æ–ø—É—Å–∫–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
    """
    owner_data = await get_owner_data()
    current_balance = owner_data.get("stars_balance", 0)
    new_balance = max(0, current_balance + delta)
    owner_data["stars_balance"] = new_balance
    await save_owner_data(owner_data)
    return new_balance


async def refund_all_star_payments(bot, username, user_id, message_func=None, max_refund_amount=None):
    """
    FIXED: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–≤—ë–∑–¥—ã —Ç–æ–ª—å–∫–æ –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞, —Å–æ–≤–µ—Ä—à—ë–Ω–Ω—ã–º —É–∫–∞–∑–∞–Ω–Ω—ã–º username.
    –ü–æ–¥–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–π —Å—É–º–º—ã.
    –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö.
    
    max_refund_amount: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    """
    # CRITICAL FIX: Use user's balance instead of bot's total balance
    if max_refund_amount is not None:
        balance = max_refund_amount  # Use user's specific balance
    else:
        balance = await refresh_balance(bot)  # Fallback to bot balance (legacy)
    
    if balance <= 0:
        return {"refunded": 0, "count": 0, "txn_ids": [], "left": 0}

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    offset = 0
    limit = 100
    all_txns = []
    while True:
        res = await bot.get_star_transactions(offset=offset, limit=limit)
        txns = res.transactions
        if not txns:
            break
        all_txns.extend(txns)
        offset += limit

    # Filter deposits without refund –∏ only with needed username
    deposits = [
        t for t in all_txns
        if t.source is not None
        and getattr(t.source, "user", None)
        and getattr(t.source.user, "username", None) == username
    ]
    refunded_ids = {t.id for t in all_txns if t.source is None}
    unrefunded_deposits = [t for t in deposits if t.id not in refunded_ids]

    n = len(unrefunded_deposits)
    best_combo = []
    best_sum = 0

    # –ò—â–µ–º –∏–¥–µ–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏–ª–∏ greedy
    if n <= 18:
        for r in range(1, n+1):
            for combo in combinations(unrefunded_deposits, r):
                s = sum(t.amount for t in combo)
                if s <= balance and s > best_sum:
                    best_combo = combo
                    best_sum = s
                if best_sum == balance:
                    break
            if best_sum == balance:
                break
    else:
        unrefunded_deposits.sort(key=lambda t: t.amount, reverse=True)
        curr_sum = 0
        best_combo = []
        for t in unrefunded_deposits:
            if curr_sum + t.amount <= balance:
                best_combo.append(t)
                curr_sum += t.amount
        best_sum = curr_sum

    if not best_combo:
        return {"refunded": 0, "count": 0, "txn_ids": [], "left": balance}

    # –î–µ–ª–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
    total_refunded = 0
    refund_ids = []
    for txn in best_combo:
        txn_id = getattr(txn, "id", None)
        if not txn_id:
            continue
        try:
            await bot.refund_star_payment(
                user_id=user_id,
                telegram_payment_charge_id=txn_id
            )
            total_refunded += txn.amount
            refund_ids.append(txn_id)
        except Exception as e:
            if message_func:
                await message_func(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ ‚òÖ{txn.amount}")

    left = balance - best_sum

    # –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π —Ö–≤–∞—Ç–∏—Ç —á—Ç–æ–±—ã –ø–æ–∫—Ä—ã—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
    # –ë–µ—Ä—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —Å—Ä–µ–¥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –≥–¥–µ amount > min_needed
    def find_next_possible_deposit(unused_deposits, min_needed):
        bigger = [t for t in unused_deposits if t.amount > min_needed]
        if not bigger:
            return None
        best = min(bigger, key=lambda t: t.amount)
        return {"amount": best.amount, "id": getattr(best, "id", None)}

    unused_deposits = [t for t in unrefunded_deposits if t not in best_combo]
    next_possible = None
    if left > 0 and unused_deposits:
        next_possible = find_next_possible_deposit(unused_deposits, left)

    return {
        "refunded": total_refunded,
        "count": len(refund_ids),
        "txn_ids": refund_ids,
        "left": left,
        "next_deposit": next_possible
    }
